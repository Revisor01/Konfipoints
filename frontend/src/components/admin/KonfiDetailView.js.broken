// frontend/src/components/admin/KonfiDetailView.js
import React, { useState } from 'react';
import { ArrowLeft, Gift, Eye, EyeOff, Copy, Check, Trash2, Plus, RefreshCw, BookOpen, Heart, Star, Award } from 'lucide-react';
import { useApp } from '../../contexts/AppContext';
import api from '../../services/api';
import { formatDate, formatShortDate } from '../../utils/formatters';
import { copyToClipboard, getProgressPercentage } from '../../utils/helpers';
import BadgeDisplay from '../shared/BadgeDisplay';
import Modal from '../shared/Modal';

const KonfiDetailView = ({ konfi, onBack, activities, settings, onUpdate }) => {
  // Removed setSuccess, setError - using Dialog instead
  const [showPassword, setShowPassword] = useState(false);
  const [copied, setCopied] = useState(false);
  const [showBonusModal, setShowBonusModal] = useState(false);
  const [showActivityModal, setShowActivityModal] = useState(false);
  const [loading, setLoading] = useState(false);
  
  // Bonus points state
  const [bonus, setBonus] = useState({
    description: '',
    points: 1,
    type: 'gottesdienst',
    date: new Date().toISOString().split('T')[0]
  });

  // Activity assignment state
  const [activityAssign, setActivityAssign] = useState({
    activityId: '',
    date: new Date().toISOString().split('T')[0]
  });

  const handleCopyPassword = async () => {
    const success = await copyToClipboard(konfi.password);
    if (success) {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const handleAddBonus = async () => {
    setLoading(true);
    try {
      await api.post(`/konfis/${konfi.id}/bonus-points`, {
        ...bonus,
        completed_date: bonus.date
      });
      alert('Zusatzpunkte erfolgreich vergeben');
      setShowBonusModal(false);
      onUpdate();
    } catch (err) {
      alert('Fehler beim Vergeben der Punkte');
    } finally {
      setLoading(false);
    }
  };


  const handleRemoveActivity = async (recordId) => {
    if (!window.confirm('Möchten Sie diese Aktivität wirklich entfernen?')) return;
    
    try {
      await api.delete(`/konfis/${konfi.id}/activities/${recordId}`);
      alert("Aktivität erfolgreich entfernt");
      onUpdate();
    } catch (err) {
      alert("Fehler beim Entfernen der Aktivität");
    }
  };

  const handleGenerateNewPassword = async () => {
    if (!window.confirm("Sind Sie sicher?")) return;
    
    
    
    setLoading(true);
    try {
      const response = await api.post(`/konfis/${konfi.id}/regenerate-password`);
      alert("Aktion erfolgreich");      onUpdate();
    } catch (err) {
      alert("Aktion erfolgreich");    } finally {
      setLoading(false);
    }
  };

  const handleDeleteKonfi = async () => {
    if (!window.confirm("Sind Sie sicher?")) return;
    
    
    
    setLoading(true);
    try {
      await api.delete(`/konfis/${konfi.id}`);
      alert("Aktion erfolgreich");      onBack(); // Go back to list
    } catch (err) {
      alert("Aktion erfolgreich");    } finally {
      setLoading(false);
    }
  };

  const handleRemoveBonus = async (bonusId) => {
    if (!window.confirm("Sind Sie sicher?")) return;
    
    
    
    try {
      await api.delete(`/konfis/${konfi.id}/bonus-points/${bonusId}`);
      alert("Aktion erfolgreich");      onUpdate();
    } catch (err) {
      alert("Aktion erfolgreich");    }
  };

  const handleAssignActivity = async (activityId) => {
    if (!activityAssign.date) {
      alert("Aktion erfolgreich");      return;
    }
    
    setLoading(true);
    try {
      await api.post(`/konfis/${konfi.id}/activities`, { 
        activity_id: activityId,
        completed_date: activityAssign.date
      alert("Aktion erfolgreich");      onUpdate();
    } catch (err) {
      alert("Aktion erfolgreich");    } finally {
      setLoading(false);
    }
  };

  const showGottesdienstTarget = parseInt(settings.target_gottesdienst || 10) > 0;
  const showGemeindeTarget = parseInt(settings.target_gemeinde || 10) > 0;

  return (
    <div className="space-y-4">
      {/* Header Card - Original Style */}
      <div className="bg-gradient-to-r from-purple-500 to-blue-500 text-white rounded-xl p-6 shadow-lg">
        <div className="flex items-center gap-3 mb-2">
          <button
            onClick={onBack}
            className="text-white/80 hover:text-white p-1"
          >
            <ArrowLeft className="w-6 h-6" />
          </button>
          <h2 className="text-xl font-bold">{konfi.name}</h2>
        </div>
        <p className="text-sm opacity-90">
          {konfi.jahrgang} • {konfi.username}
        </p>
        <div className="grid grid-cols-3 gap-4 mt-4 text-center">
          <div>
            <div className="text-2xl font-bold">{konfi.points.gottesdienst + konfi.points.gemeinde}</div>
            <div className="text-xs opacity-80">Punkte</div>
          </div>
          <div>
            <div className="text-2xl font-bold">{konfi.activities?.length || 0}</div>
            <div className="text-xs opacity-80">Aktivitäten</div>
          </div>
          <div>
            <div className="text-2xl font-bold">{konfi.badgeCount || 0}</div>
            <div className="text-xs opacity-80">Badges</div>
          </div>
        </div>
      </div>

      {/* Actions & Info */}
      <div className="bg-white rounded-xl shadow-sm p-4">
        <h3 className="font-bold text-gray-800 mb-4">Verwaltung</h3>
        
        {/* Action Buttons */}
        <div className="grid grid-cols-1 gap-3 mb-4">
          <button
            onClick={() => {
              // TODO: Zusatzpunkte Modal
              setShowBonusModal(true);
            }}
            className="bg-orange-500 text-white py-3 px-4 rounded-lg hover:bg-orange-600 flex items-center justify-center gap-2 font-medium text-base"
          >
            <Gift className="w-4 h-4" />
            Zusatzpunkte
          </button>
          <button
            onClick={handleGenerateNewPassword}
            disabled={loading}
            className="bg-blue-500 text-white py-3 px-4 rounded-lg hover:bg-blue-600 flex items-center justify-center gap-2 font-medium text-base disabled:opacity-50"
          >
            <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
            Neues Passwort
          </button>
          <button
            onClick={handleDeleteKonfi}
            disabled={loading}
            className="bg-red-500 text-white py-3 px-4 rounded-lg hover:bg-red-600 flex items-center justify-center gap-2 font-medium text-base disabled:opacity-50"
          >
            <Trash2 className="w-4 h-4" />
            Löschen
          </button>
        </div>

        {/* Password Display */}
        <div className="mt-4 p-3 bg-gray-50 rounded-lg">
          <div className="flex items-center gap-2 text-sm">
            <span className="text-gray-600">Passwort:</span>
            {showPassword ? (
              <span className="font-mono">{konfi.password}</span>
            ) : (
              <span>••••••••••</span>
            )}
            <button
              onClick={() => setShowPassword(!showPassword)}
              className="text-blue-500 hover:text-blue-700 p-1"
            >
              {showPassword ? <EyeOff className="w-3 h-3" /> : <Eye className="w-3 h-3" />}
            </button>
          </div>
        </div>
      </div>

      {/* Progress Cards - Original Style */}
      {(showGottesdienstTarget || showGemeindeTarget) && (
        <div className={`grid gap-4 ${showGottesdienstTarget && showGemeindeTarget ? 'grid-cols-1 md:grid-cols-2' : 'grid-cols-1'}`}>
          {showGottesdienstTarget && (
            <div className="bg-white rounded-xl p-4 shadow-sm">
              <h3 className="font-bold text-blue-800 mb-3 flex items-center gap-2">
                <BookOpen className="w-5 h-5" />
                Gottesdienst
              </h3>
              <div className="text-3xl font-bold text-blue-600 mb-2">
                {konfi.points.gottesdienst}/{settings.target_gottesdienst}
              </div>
              <div className="w-full bg-gray-200 rounded-full h-3">
                <div 
                  className={`h-3 rounded-full transition-all ${
                    konfi.points.gottesdienst >= parseInt(settings.target_gottesdienst) 
                      ? 'bg-green-500' 
                      : konfi.points.gottesdienst >= parseInt(settings.target_gottesdienst) * 0.75 
                        ? 'bg-yellow-500' 
                        : 'bg-blue-500'
                  }`}
                  style={{ width: `${Math.min((konfi.points.gottesdienst / parseInt(settings.target_gottesdienst)) * 100, 100)}%` }}
                ></div>
              </div>
              {konfi.points.gottesdienst >= parseInt(settings.target_gottesdienst) && (
                <div className="text-green-600 font-bold flex items-center gap-2 mt-2">
                  <Star className="w-4 h-4" />
                  Ziel erreicht!
                </div>
              )}
            </div>
          )}

          {showGemeindeTarget && (
            <div className="bg-white rounded-xl p-4 shadow-sm">
              <h3 className="font-bold text-green-800 mb-3 flex items-center gap-2">
                <Heart className="w-5 h-5" />
                Gemeinde
              </h3>
              <div className="text-3xl font-bold text-green-600 mb-2">
                {konfi.points.gemeinde}/{settings.target_gemeinde}
              </div>
              <div className="w-full bg-gray-200 rounded-full h-3">
                <div 
                  className={`h-3 rounded-full transition-all ${
                    konfi.points.gemeinde >= parseInt(settings.target_gemeinde) 
                      ? 'bg-green-500' 
                      : konfi.points.gemeinde >= parseInt(settings.target_gemeinde) * 0.75 
                        ? 'bg-yellow-500' 
                        : 'bg-green-500'
                  }`}
                  style={{ width: `${Math.min((konfi.points.gemeinde / parseInt(settings.target_gemeinde)) * 100, 100)}%` }}
                ></div>
              </div>
              {konfi.points.gemeinde >= parseInt(settings.target_gemeinde) && (
                <div className="text-green-600 font-bold flex items-center gap-2 mt-2">
                  <Star className="w-4 h-4" />
                  Ziel erreicht!
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {/* Badges Card - Original Style */}
      {konfi.badges && konfi.badges.length > 0 && (
        <div className="bg-white rounded-xl p-4 shadow-sm">
          <h3 className="font-bold text-yellow-800 mb-4 flex items-center gap-2">
            <Award className="w-5 h-5" />
            Erreichte Badges ({konfi.badges.length})
          </h3>
          <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-3">
            {konfi.badges.map(badge => (
              <div key={badge.id} className="text-center p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                <div className="text-2xl mb-2">{badge.icon}</div>
                <div className="text-xs font-bold text-yellow-800 leading-tight mb-1">{badge.name}</div>
                <div className="text-xs text-gray-500">{formatDate(badge.earned_at)}</div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Schnell-Zuordnung Card - Original Style */}
      <div className="bg-white rounded-xl p-4 shadow-sm">
        <h3 className="font-bold text-gray-800 mb-4">Schnell-Zuordnung</h3>

        <div className="grid grid-cols-2 gap-3 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Datum</label>
            <div className="relative">
              <input
                type="date"
                value={activityAssign.date}
                onChange={(e) => setActivityAssign({...activityAssign, date: e.target.value})}
                className="w-full p-3 border-0 bg-gray-50 rounded-lg focus:ring-2 focus:ring-blue-500 focus:bg-white appearance-none"
                style={{ 
                  WebkitAppearance: 'none',
                  MozAppearance: 'textfield',
                  maxWidth: '100%',
                  boxSizing: 'border-box'
                }}
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Sortierung</label>
            <div className="relative">
              <select
                className="w-full p-3 border-0 bg-gray-50 rounded-lg focus:ring-2 focus:ring-blue-500 focus:bg-white appearance-none"
              >
                <option value="name">Nach Name</option>
                <option value="points">Nach Punkten</option>
                <option value="type">Nach Typ</option>
              </select>
            </div>
          </div>
        </div>

        <div className="space-y-2">
          {activities
            .sort((a, b) => a.name.localeCompare(b.name))
            .map(activity => (
              <button
                key={activity.id}
                onClick={() => handleAssignActivity(activity.id)}
                disabled={loading}
                className={`w-full text-left p-3 rounded-lg border text-sm disabled:opacity-50 transition-colors ${
                  activity.type === 'gottesdienst' 
                    ? 'bg-blue-50 hover:bg-blue-100 border-blue-200' 
                    : 'bg-green-50 hover:bg-green-100 border-green-200'
                }`}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    {activity.type === 'gottesdienst' ? (
                      <BookOpen className="w-4 h-4 text-blue-600" />
                    ) : (
                      <Heart className="w-4 h-4 text-green-600" />
                    )}
                    <span className="font-medium">{activity.name}</span>
                  </div>
                  <span className={`font-bold ${
                    activity.type === 'gottesdienst' ? 'text-blue-600' : 'text-green-600'
                  }`}>
                    +{activity.points}
                  </span>
                </div>
              </button>
            ))}
        </div>
      </div>

      {/* Activities & Bonus Points List - Original Style */}
      <div className="bg-white rounded-xl p-4 shadow-sm">
        <h3 className="font-bold text-gray-800 mb-4">Absolvierte Aktivitäten & Zusatzpunkte</h3>
        {(konfi.activities.length === 0 && (!konfi.bonusPoints || konfi.bonusPoints.length === 0)) ? (
          <p className="text-gray-600 text-center py-8">Noch keine Aktivitäten absolviert.</p>
        ) : (
          <div className="space-y-3">
            {/* Aktivitäten */}
            {konfi.activities.map((activity, index) => (
              <div key={index} className={`flex justify-between items-center p-3 rounded-lg ${
                activity.type === 'gottesdienst' ? 'bg-blue-50 border border-blue-200' : 'bg-green-50 border border-green-200'
              }`}>
                <div className="flex items-center gap-3 flex-1 min-w-0">
                  {activity.type === 'gottesdienst' ? (
                    <BookOpen className="w-4 h-4 text-blue-600 flex-shrink-0" />
                  ) : (
                    <Heart className="w-4 h-4 text-green-600 flex-shrink-0" />
                  )}
                  <div className="min-w-0 flex-1">
                    <div className="font-medium text-gray-800 truncate">{activity.name}</div>
                    <div className="text-sm text-gray-600">
                      {formatDate(activity.date)}
                      {activity.admin && (
                        <span className="ml-2 text-xs">• {activity.admin}</span>
                      )}
                    </div>
                  </div>
                </div>
                <span className="font-bold text-orange-600 flex-shrink-0 ml-3">+{activity.points}</span>
              </div>
            ))}

            {/* Zusatzpunkte */}
            {konfi.bonusPoints && konfi.bonusPoints.map((bonus, index) => (
              <div key={`bonus-${index}`} className="flex justify-between items-center p-3 rounded-lg bg-orange-50 border border-orange-200">
                <div className="flex items-center gap-3 flex-1 min-w-0">
                  <Gift className="w-4 h-4 text-orange-600 flex-shrink-0" />
                  <div className="min-w-0 flex-1">
                    <div className="font-medium text-gray-800 truncate">{bonus.description}</div>
                    <div className="text-sm text-gray-600">
                      {formatDate(bonus.date)}
                      {bonus.admin && (
                        <span className="ml-2 text-xs">• {bonus.admin}</span>
                      )}
                    </div>
                  </div>
                </div>
                <span className="font-bold text-orange-600 flex-shrink-0 ml-3">+{bonus.points}</span>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modals */}
      <Modal
        show={showBonusModal}
        onClose={() => setShowBonusModal(false)}
        title="Zusatzpunkte vergeben"
        submitButtonText="Vergeben"
        onSubmit={handleAddBonus}
        submitDisabled={!bonus.description.trim()}
        loading={loading}
      >
        <div className="p-4 space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Beschreibung *</label>
            <input
              type="text"
              value={bonus.description}
              onChange={(e) => setBonus({...bonus, description: e.target.value})}
              className="w-full p-3 border rounded-lg"
              placeholder="z.B. Zusätzliche Teilnahme"
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-2">Punkte</label>
              <input
                type="number"
                min="1"
                max="50"
                value={bonus.points}
                onChange={(e) => setBonus({...bonus, points: parseInt(e.target.value)})}
                className="w-full p-3 border rounded-lg"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Typ</label>
              <select
                value={bonus.type}
                onChange={(e) => setBonus({...bonus, type: e.target.value})}
                className="w-full p-3 border rounded-lg"
              >
                <option value="gottesdienst">Gottesdienst</option>
                <option value="gemeinde">Gemeinde</option>
              </select>
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">Datum</label>
            <input
              type="date"
              value={bonus.date}
              onChange={(e) => setBonus({...bonus, date: e.target.value})}
              className="w-full p-3 border rounded-lg"
            />
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default KonfiDetailView;
